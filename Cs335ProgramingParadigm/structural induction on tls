;;

In Scheme, things are pretty similar. Blocks can be created with let expressions, like so:

...
(let ((x 10)
      (y 20))
   (foo x y))
...
The first part of the let is the variable binding clause, which in this case two subclauses, (x 10) and (y 20). This says that the let will create a variable named x whose initial value is 10, and another variable y whose initial value is 20. A let's variable binding clause can contain any number of clauses, creating any number of let variables. Each subclause is very much like the name and initial value parts of a define form.

The rest of the let is a sequence of expressions, called the let body. The expressions are simply evaluated in order, and the value of the last expression is returned as the value of the whole let expression. (The fact that this value is returned is very handy, and will be important in examples we use later.)

A let may only bind one variable, but it still needs parentheses around the whole variable binding clause, as well as around the (one) subclause for a particular binding. For example:

...
(let ((x 10))
   (foo x))
...
(Don't forget the "extra" parentheses around the one variable binding clause--they're not really extra, because they're what tells Scheme where the variable binding clause starts and stops. In this case, before and after the subclause that defines the one variable.)

In Scheme, you can use local variables pretty much the way you do in most languages. When you enter a let expression, the let variables will be bound and initialized with values. When you exit the let expression, those bindings will disappear.


;; Strutural induction on TLS.
;; adding let to the system.

;; extend TLS by adding let.
;; there is no bound on Let.( meaning we can have nested )
;;meaning the new system must be able able (let( x 1)(y 2))
;; (cond((=x 1 )(let((w3)))))

;; the main ideas is: Add a new type *let, cond, define  the corresponding action function. *let desugar the outermost let
;; that is (let(x1 v1)-----((xn vn)) let-body)

;;IH if let occured in strutural smaller compoment, then we can asssume that it work and handle let at the top most level.


;; Post- syntax tranformtion is correctly done.





;; show that TLS scheme implement first class function correctly.

;;;-----------------------------------------------------------------lexical scope start
;; Prove that Tls correctly implement lexical scope?


;the overall argument is showing that this goes by structural induction on tls.
;how let consider 2 aspect of lexcial scope
; 1- variable shadowing - correct implementation of local vasriable 
;2- correctly handling of free variable in the creation of closure

; first thing to realise is that most of cases which strutural induction go through
;;vacuously without effect. this is because lexical scoping only arises in correction with application of lamdba forms.

;for example. In the basis step there is nothing to do because such applications do not occur in numbers, primitives, identifiers or thruth value.


;; specialy we want to show that if e is a well defined form TLS expressions, then the interpreter handle 
;;local and free variable  in the closure correctly.
;; it handle  binding correctly with lambda stacking of the environment we use to prove the correctness.

;;Similary most part of the induction step, the conclusion of the correctness  immediately formed the IH.
;; for example  if TLS evaluate a (cond (p1 e1)(p2 e2)...)then any occurance of code give rise to the structural creation of closures.

;1- variable shadowing and 2- Correct handling of free variables, must eventually and entirely contained in one of p1 and one of 2.
;;Specially, we want to show that if 2 is a  well formed TLS expression, then the interpreter handdle 1-2 correctly.
;;;-----------------------------------------------------

;; for canonical IH for structureal induction, the property hold for all strutural smaller components.
;;;;; Look at TLS and give similar for *lambda, Applications of primitive.


;; the only case requiring some work is ((Lambda)(x)g)v) where g is a TLS expression and v is a TLS Value.
;; for this form, we know that g will be evaluated in an environment whose bottom rib(Rightmost rib) is((x),(V))
;; this meam that any lambda form which occur in g are either entirely evaluated  using ribs above this one(perhap created just in time) or the lambda form
;;contains a free occruence of  x .


;; this follow from the design of apply-closure which put new ribs in-front of the old ribs and from the design of environment subsystem- which
;; does lookup starting with the topmost(left most rib).


; ENV ((x)(v)) No code fr removing that rib.
;; When call finish there, it goes back to the original.

;;-- asssume that g is a well formed  TL Sexpression and ALL variable have Bidding..
;; we chech within the first  rib, if not available, we go to the second rib. If not in the second(or inner most rib), we get an error.

;;--IH. if there is  free variable in g that is not x, every -variable  that occur in g other than x have biding(free-variable in closure)

;; local variable top most rib add a new rib at the top of most recent is left to the environment
;; element below  would be earlier and  and showdowed.



;;--------------------------------------------------lexcial scope end.



