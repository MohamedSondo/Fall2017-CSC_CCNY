For our project, we plan to implement threads in Racket. This idea was inspired by the attached paper, Nested Data Parallelism for Image Processing Algorithms - Optimizations in Functional Programming Languages, by Chandrakant Swaneet Kumar Sahoo (2015), in which concurrency is used as one of the approaches to implement histogram balancing on images in the Haskell programming language. Our goal is to use the ideas presented in this paper, along with a few of the methods described in Christian Queinnec's 1990 paper, PolyScheme: A Semantics for a Concurrent Scheme and several in the 2011 paper Places: Adding Message-Passing Parallelism to Racket by Kevin Tew et al. to implement threads in such a way that each thread may communicate may other threads more seamlessly than Racket currently allows.

For our project, we plan to implement communicating sequential processes (CSP) in Racket. Concurrency is an important topic of computer science, and is often used to optimize completion of tasks which do not need to rely on one another to be executed. For example, the attached paper, Nested Data Parallelism for Image Processing Algorithms - Optimizations in Functional Programming Languages, by Chandrakant Swaneet Kumar Sahoo in 2015, uses concurrency to implement a more efficient algorithm for histogram balancing on images in Haskell. This application, in addition to the ideas and methods described in the 2011 paper Places: Adding Message-Passing Parallelism to Racket by Kevin Tew et al., suggests the possibility of adding message-passing concurrency in the form of CSP to Racket, so that processes running concurrently may exchange data between both each other and the main process. Upon implementing CSP, we hope to also implement the manually parallelized version of the histogram balancing algorithm as described in Sahoo (2015).
